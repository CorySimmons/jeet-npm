// Generated by CoffeeScript 1.5.0
(function() {
  var coffee, exports, fs;

  coffee = require("coffee-script");

  fs = require("fs");

  exports = module.exports = function(path) {
    var script;
    return script = fs.readFile(path, function(err, data) {
      var code, end, i, js, line, lines, newPath, start;
      if (err) {
        return err;
      }
      js = "";
      code = data.toString();
      try {
        js = coffee.compile(code);
      } catch (e) {
        e.location.first_line++;
        console.log("\x1B[0;31mCoffee Error\x1B[0;0m in \x1B[0;1m" + path.split("/").pop() + "\x1B[0;0m on line \x1B[0;1m" + e.location.first_line + "\x1B[0;0m");
        console.log("````````````````````````````````````");
        code = code.split("\n");
        if (code[code.length - 1] === "") {
          code.pop();
        }
        lines = code.length;
        start = Math.max(0, e.location.first_line - 3);
        end = start + 5;
        if (end > lines) {
          if (start > 1 && (end - lines) > 1) {
            start -= 2;
            end = Math.min(end - 2, lines);
          } else if (start > 0) {
            start -= 1;
            end = Math.min(end - 1, lines);
          } else {
            end = lines;
          }
        }
        code = code.slice(start, end);
        for (i in code) {
          line = code[i];
          i++;
          i += start;
          if (i === e.location.first_line) {
            console.log("\x1B[0;1m > " + i + "| " + line + "\x1B[0;0m");
          } else {
            console.log("   " + i + "| " + line);
          }
        }
        console.log("\n\x1B[0;31m" + e.message + "\x1B[0;0m");
        console.log("````````````````````````````````````");
        return;
      }
      newPath = path.substr(0, path.length - 7) + ".js";
      return fs.writeFile(newPath, js, function(err) {
        if (err) {
          return;
        }
        return console.log("Recompiled " + path.split("/").pop());
      });
    });
  };

}).call(this);
