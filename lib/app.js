// Generated by CoffeeScript 1.5.0
(function() {
  var ajson, app_version, check, clog, cltags, compile, create, http, isPortTaken, jjson, lookup, minify, net, npm, sjson, startLiveReload, tags, tinylr, watcher;

  watcher = require("./watcher.js");

  compile = require("./compiler.js");

  create = require("./create.js");

  minify = require("./minify.js");

  tinylr = require("tiny-lr");

  cltags = require("cltags");

  http = require("http");

  net = require("net");

  tags = cltags.parse(process.argv, {
    ignore: false
  }, {
    h: "help",
    v: "version",
    V: "version"
  });

  jjson = require('../package.json');

  app_version = "jeet-npm v" + jjson.version;

  clog = console.log;

  console.log = function(object) {
    if (object && object.toString().substr(0, 10) !== "... Reload") {
      return clog(object);
    }
  };

  isPortTaken = function(PORT, callback) {
    var tester;
    tester = net.createServer();
    tester.once('error', function(err) {
      if (err.code === 'EADDRINUSE') {
        return callback(null, true);
      } else {
        return callback(err);
      }
    });
    tester.once('listening', function() {
      tester.once('close', function() {
        return callback(null, false);
      });
      return tester.close();
    });
    return tester.listen(PORT);
  };

  startLiveReload = function() {
    return isPortTaken(35729, function(err, taken) {
      if (!err && !taken) {
        tinylr().listen(35729, function() {});
        tags.livereload = true;
        return console.log("Live Reload is listening on port 35729");
      } else if (!err && taken) {
        tags.livereload = false;
        return console.log("\x1B[0;31mThe livereload port seems to be in use by another app, so live-reload will be turned off\x1B[0;0m");
      } else {
        console.log("\x1B[0;31m" + err + "\x1B[0;0m\n");
        return process.kill();
      }
    });
  };

  if (tags.command === "watch") {
    startLiveReload();
    watcher.watch(function(file) {
      if (file.substr(-5) === ".styl") {
        return compile(watcher.stylFile);
      } else if (file.substr(-3) === ".js" && file.substr(-11) !== "minified.js") {
        return minify(watcher.jsDir);
      } else if (tags.livereload) {
        http.get("http://localhost:35729/changed?files=" + file);
        return console.log("\x1B[0;32m" + file.split("/").pop() + " modified & reloaded\x1B[0;0m");
      } else {
        return console.log("\x1B[0;32m" + file.split("/").pop() + " modified\x1B[0;0m");
      }
    });
  } else if (tags.command === "create" || tags.create === true) {
    if (tags.query === "") {
      tags.query = "jeet";
    }
    if (!tags.ignore) {
      ajson = require("../node_modules/axis-css/package.json");
      sjson = require("../node_modules/stylus/package.json");
      check = [jjson, ajson, sjson];
      npm = "http://registry.npmjs.org/";
      (lookup = function() {
        var p;
        if (check.length === 0) {
          return create(tags.query);
        } else {
          p = check.shift();
          return http.get(npm + p.name + "/latest", function(res) {
            var data;
            data = "";
            res.on("data", function(d) {
              return data += d.toString();
            });
            return res.on("end", function() {
              data = JSON.parse(data);
              if (data.version !== p.version) {
                console.log("There is a newer version of " + p.name + " available please run `\x1B[0;1mnpm install -g jeet\x1B[0;0m` before creating a new project");
                return console.log("To ignore this check run this command with the `\x1B[0;1m--ignore\x1B[0;0m` flag");
              } else {
                return lookup();
              }
            });
          }).on('error', function(e) {
            return lookup();
          });
        }
      })();
    } else {
      create(tags.query);
    }
  } else if (tags.command === "help" || tags.help === true) {
    console.log("Usage: jeet [options] [command]\n\nCommands:\n    watch                   watch the current path and recompile CSS on changes\n    create <name>           create a new jeet project with the given name\n\n    Options:\n        -h, --help          output usage information\n        -V/-v, --version    output the version number\n");
  } else if (tags.command === "version" || tags.version === true) {
    console.log(app_version);
  }

}).call(this);
