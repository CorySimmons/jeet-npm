// Generated by CoffeeScript 1.5.0
(function() {
  var cloneLocalRepo, exports, fs, getFiles, ghd, https, mkdirp;

  fs = require("fs");

  https = require("https");

  ghd = require("./githubd.js");

  getFiles = function(dir, done) {
    var results;
    results = [];
    return fs.readdir(dir, function(err, list) {
      var i, next;
      if (err) {
        return done(err);
      }
      i = 0;
      return (next = function() {
        var file;
        file = list[i++];
        if (!file) {
          return done(null, results);
        }
        if (file.charAt(0) === ".") {
          return next();
        } else {
          file = dir + '/' + file;
          return fs.stat(file, function(err, stat) {
            if (stat && stat.isDirectory()) {
              return getFiles(file, function(err, res) {
                results = results.concat(res);
                return next();
              });
            } else {
              results.push(file);
              return next();
            }
          });
        }
      })();
    });
  };

  mkdirp = function(lp, path) {
    var cp, p, _i, _len, _results;
    path = path.split("/");
    if (typeof lp === "string") {
      cp = lp;
    }
    if (cp.charAt(cp.length - 1) !== "/") {
      cp = cp + "/";
    }
    _results = [];
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      p = path[_i];
      cp += p + "/";
      if (!fs.existsSync(cp)) {
        _results.push(fs.mkdirSync(cp));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  cloneLocalRepo = function(foldername, name) {
    var ignore, localpath;
    ignore = ["README.md", "watch", "bower.json", "package.json"];
    localpath = "./" + name + "/";
    if (name === "." || name === "./") {
      localpath = "./";
      name = process.cwd().split("/").pop();
    }
    if (localpath === "./") {
      if (fs.existsSync("./css/jeet/")) {
        console.log("this is already a Jeet project");
        process.kill();
      }
    } else if (fs.existsSync(localpath)) {
      console.log(name + " already exists");
      process.kill();
    } else {
      fs.mkdirSync(localpath);
    }
    return getFiles(foldername, function(err, files) {
      var cycle;
      return (cycle = function() {
        var file, path, rfile, ws;
        if (files.length === 0) {
          return console.log("Created project \x1B[0;1m" + name + "\x1B[0;0m");
        } else {
          file = files.shift();
          rfile = file.substr(foldername.length + 1);
          if (ignore.indexOf(rfile) === -1) {
            path = rfile.split("/");
            rfile = path.pop();
            path = path.join("/");
            mkdirp(localpath, path);
            ws = fs.createWriteStream(localpath + path + "/" + rfile);
            fs.createReadStream(file).pipe(ws);
            return ws.on("close", function() {
              return cycle();
            });
          } else {
            return cycle();
          }
        }
      })();
    });
  };

  exports = module.exports = function(name, ignore) {
    var foldername;
    foldername = __dirname.split("/");
    foldername = foldername.slice(0, foldername.length - 1).join("/") + "/jeet";
    if (!ignore) {
      return ghd.updateByRepo("CorySimmons", "jeet", foldername, function(err) {
        if (err) {
          return console.log(err);
        } else {
          return cloneLocalRepo(foldername, name);
        }
      });
    } else {
      return cloneLocalRepo(foldername, name);
    }
  };

}).call(this);
