// Generated by CoffeeScript 1.5.0
(function() {
  var cloneLocalRepo, exports, fs, getFiles, ghd, https, mkdirp, path;

  fs = require("fs");

  https = require("https");

  ghd = require("./githubd.js");

  path = require("path");

  getFiles = function(dir, done) {
    var results;
    results = [];
    return fs.readdir(dir, function(err, list) {
      var i, next;
      if (err) {
        return done(err);
      }
      i = 0;
      return (next = function() {
        var file;
        file = list[i++];
        if (!file) {
          return done(null, results);
        }
        if (file.charAt(0) === ".") {
          return next();
        } else {
          file = dir + path.sep + file;
          return fs.stat(file, function(err, stat) {
            if (stat && stat.isDirectory()) {
              return getFiles(file, function(err, res) {
                results = results.concat(res);
                return next();
              });
            } else {
              results.push(file);
              return next();
            }
          });
        }
      })();
    });
  };

  mkdirp = function(lp, fpath) {
    var cp, p, _i, _len, _results;
    fpath = fpath.split(path.sep);
    if (typeof lp === "string") {
      cp = lp;
    }
    cp = path.normalize(cp + path.sep);
    _results = [];
    for (_i = 0, _len = fpath.length; _i < _len; _i++) {
      p = fpath[_i];
      cp += p + path.sep;
      if (!fs.existsSync(cp)) {
        _results.push(fs.mkdirSync(cp));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  cloneLocalRepo = function(foldername, name) {
    var ignore, localpath;
    ignore = ["README.md", "watch", "bower.json", "package.json"];
    localpath = path.normalize(process.cwd() + path.sep + name + path.sep);
    if (name === "." || name === "./") {
      localpath = path.normalize(process.cwd() + path.sep);
      name = process.cwd().split(path.sep).pop();
      if (fs.existsSync(localpath + "css" + path.sep + "jeet" + path.sep)) {
        console.log("this is already a Jeet project");
        process.kill();
      }
    } else {
      if (fs.existsSync(localpath)) {
        console.log(name + " already exists");
        process.kill();
      } else {
        fs.mkdirSync(localpath);
      }
    }
    return getFiles(foldername, function(err, files) {
      var cycle;
      return (cycle = function() {
        var file, fpath, rfile, ws;
        if (files.length === 0) {
          return console.log("Created project \x1B[0;1m" + name + "\x1B[0;0m");
        } else {
          file = files.shift();
          rfile = file.substr(foldername.length + 1);
          if (ignore.indexOf(rfile) === -1) {
            fpath = rfile.split(path.sep);
            rfile = fpath.pop();
            fpath = fpath.join(path.sep);
            mkdirp(localpath, fpath);
            ws = fs.createWriteStream(path.normalize(localpath + path.sep + fpath + path.sep + rfile));
            fs.createReadStream(file).pipe(ws);
            return ws.on("close", function() {
              return cycle();
            });
          } else {
            return cycle();
          }
        }
      })();
    });
  };

  exports = module.exports = function(name, ignore, debug) {
    var foldername;
    if (debug) {
      console.log("Dirname: " + __dirname);
    }
    foldername = path.normalize(__dirname + path.sep + ".." + path.sep + "jeet" + path.sep);
    if (!ignore) {
      return ghd.updateByRepo("CorySimmons", "jeet", foldername, function(err) {
        if (err) {
          return console.log(err);
        } else {
          return cloneLocalRepo(foldername, name);
        }
      });
    } else {
      return cloneLocalRepo(foldername, name);
    }
  };

}).call(this);
