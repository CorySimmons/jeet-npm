// Generated by CoffeeScript 1.5.0
(function() {
  var downloadGithubFiles, exports, fs, getFiles, getGithubFiles, https, httpsload, mkdirp, pullFromGithub, updateRepo;

  fs = require("fs");

  https = require("https");

  getFiles = function(dir, done) {
    var results;
    results = [];
    return fs.readdir(dir, function(err, list) {
      var i, next;
      if (err) {
        return done(err);
      }
      i = 0;
      return (next = function() {
        var file;
        file = list[i++];
        if (!file) {
          return done(null, results);
        }
        if (file.charAt(0) === ".") {
          return next();
        } else {
          file = dir + '/' + file;
          return fs.stat(file, function(err, stat) {
            if (stat && stat.isDirectory()) {
              return getFiles(file, function(err, res) {
                results = results.concat(res);
                return next();
              });
            } else {
              results.push(file);
              return next();
            }
          });
        }
      })();
    });
  };

  httpsload = function(url, cb) {
    return https.get(url, function(res) {
      var data;
      data = "";
      res.on("data", function(d) {
        return data += d.toString();
      });
      return res.on("end", function() {
        return cb(false, data);
      });
    }).on("error", function() {
      return cb(true);
    });
  };

  getGithubFiles = function(url, done) {
    var ignore, results;
    ignore = ["README.md", "watch"];
    results = [];
    return httpsload(url, function(err, json) {
      var i, list, next;
      if (err) {
        return done(true);
      }
      list = JSON.parse(json);
      i = 0;
      return (next = function() {
        var file;
        file = list[i++];
        if (!file) {
          return done(false, results);
        }
        if (file.name.charAt(0) === "." || ignore.indexOf(file.name) !== -1) {
          return next();
        } else {
          if (file.type === "dir") {
            return getGithubFiles(file.url, function(err, res) {
              results = results.concat(res);
              return next();
            });
          } else {
            results.push(file.url);
            return next();
          }
        }
      })();
    });
  };

  downloadGithubFiles = function(foldername, files, cb) {
    var cycle;
    return (cycle = function() {
      var file;
      if (files.length === 0) {
        return cb(false);
      } else {
        file = files.shift();
        return httpsload(file, function(err, json) {
          var contents, data;
          if (err) {
            cb(true);
          }
          data = JSON.parse(json);
          contents = new Buffer(data.content, "base64").toString();
          return fs.writeFile(foldername + "/" + data.path, contents, function(err) {
            if (err) {
              cb(true);
            }
            return cycle();
          });
        });
      }
    })();
  };

  mkdirp = function(lp, path) {
    var cp, p, _i, _len, _results;
    path = path.split("/");
    cp = lp;
    _results = [];
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      p = path[_i];
      cp += p + "/";
      if (!fs.existsSync(cp)) {
        _results.push(fs.mkdirSync(cp));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  pullFromGithub = function(foldername, cb) {
    console.log("Downloading a newer version of jeet");
    return getGithubFiles("https://api.github.com/repos/CorySimmons/jeet/contents/", function(err, files) {
      if (err) {
        cb();
      }
      return downloadGithubFiles(foldername, files, cb);
    });
  };

  updateRepo = function(foldername, cb) {
    return httpsload("https://api.github.com/repos/CorySimmons/jeet", function(err, res) {
      var data;
      if (err) {
        return cb();
      }
      try {
        data = JSON.parse(res);
        return fs.readFile(foldername + "/.latest", function(err, d) {
          if (d.toString() !== data.pushed_at) {
            return pullFromGithub(foldername, function(err) {
              if (!err) {
                fs.writeFileSync(foldername + "/.latest", data.pushed_at);
              }
              return cb();
            });
          } else {
            return cb();
          }
        });
      } catch (e) {
        return cb();
      }
    });
  };

  exports = module.exports = function(name) {
    var foldername;
    foldername = __dirname.split("/");
    foldername = foldername.slice(0, foldername.length - 1).join("/") + "/jeet";
    return updateRepo(foldername, function() {
      var ignore, localpath;
      ignore = ["README.md", "watch"];
      localpath = "./" + name + "/";
      if (name === "." || name === "./") {
        localpath = "./";
        name = process.cwd().split("/").pop();
      }
      if (localpath === "./") {
        if (fs.existsSync("./css/jeet.styl")) {
          console.log("this is already a jeet project");
          process.kill();
        }
      } else if (fs.existsSync(localpath)) {
        console.log(name + " already exists");
        process.kill();
      } else {
        fs.mkdirSync(localpath);
      }
      return getFiles(foldername, function(err, files) {
        var cycle;
        return (cycle = function() {
          var file, path, rfile, ws;
          if (files.length === 0) {
            return console.log("Created project \x1B[0;1m" + name + "\x1B[0;0m");
          } else {
            file = files.shift();
            rfile = file.substr(foldername.length + 1);
            if (ignore.indexOf(rfile) === -1) {
              path = rfile.split("/");
              rfile = path.pop();
              path = path.join("/");
              mkdirp(localpath, path);
              ws = fs.createWriteStream(localpath + path + "/" + rfile);
              fs.createReadStream(file).pipe(ws);
              return ws.on("close", function() {
                return cycle();
              });
            } else {
              return cycle();
            }
          }
        })();
      });
    });
  };

}).call(this);
