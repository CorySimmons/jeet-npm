// Generated by CoffeeScript 1.5.0
(function() {
  var exports, fs, jade;

  jade = require("jade");

  fs = require("fs");

  exports = module.exports = function(path) {
    var script;
    return script = fs.readFile(path, function(err, data) {
      var code, fileline, html, i, line, linenumber, msg, newPath;
      if (err) {
        return err;
      }
      html = "";
      code = data.toString();
      try {
        html = jade.compile(code);
      } catch (e) {
        msg = e.message.split("\n");
        fileline = msg.shift().split(":");
        linenumber = fileline.pop();
        console.log("\x1B[0;31mJade Error\x1B[0;0m in \x1B[0;1m" + path.split("/").pop() + "\x1B[0;0m on line \x1B[0;1m" + linenumber + "\x1B[0;0m");
        console.log("````````````````````````````````````");
        for (i in msg) {
          line = msg[i];
          if (line.charAt(2) === ">") {
            msg[i] = "\x1B[0;1m" + line + "\x1B[0;0m";
          }
        }
        msg.push("\x1B[0;31m" + msg.pop() + "\x1B[0;0m");
        console.log(msg.join("\n"));
        console.log("````````````````````````````````````");
        return;
      }
      newPath = path.substr(0, path.length - 5) + ".html";
      return fs.writeFile(newPath, html(), function(err) {
        if (err) {
          return;
        }
        return console.log("Recompiled " + path.split("/").pop());
      });
    });
  };

}).call(this);
