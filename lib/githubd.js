// Generated by CoffeeScript 1.5.0
(function() {
  var crypto, downloadGithubFiles, exports, fs, getJSON, getReposFileHashes, getShaForFile, https, ignore, skipUpToDate;

  fs = require("fs");

  https = require("https");

  crypto = require("crypto");

  ignore = ["README.md", "watch", "bower.json", "package.json"];

  exports = module.exports = {};

  getJSON = function(url, cb) {
    return https.get(url, function(res) {
      var data;
      data = "";
      res.on("data", function(d) {
        return data += d.toString();
      });
      return res.on("end", function() {
        try {
          data = JSON.parse(data);
          return cb(false, data);
        } catch (e) {
          return cb(e);
        }
      });
    }).on("error", function(e) {
      return cb(e);
    });
  };

  getReposFileHashes = function(url, cb) {
    var results;
    results = [];
    return getJSON(url, function(err, json) {
      var i, next;
      if (err) {
        return cb(err);
      }
      i = 0;
      return (next = function() {
        var file;
        file = json[i++];
        if (!file) {
          return cb(false, results);
        }
        if (file.name.charAt(0) === "." || ignore.indexOf(file.name) !== -1) {
          return next();
        } else {
          if (file.type === "dir") {
            return getReposFileHashes(file.url, function(err, res) {
              if (err) {
                return cb(err);
              }
              results = results.concat(res);
              return next();
            });
          } else {
            results.push(file);
            return next();
          }
        }
      })();
    });
  };

  getShaForFile = function(path, cb) {
    var s, shasum;
    shasum = crypto.createHash("sha1");
    s = fs.ReadStream(path);
    s.on("data", function(d) {
      return shasum.update(d);
    });
    s.on("end", function() {
      return cb(false, shasum.digest("hex"));
    });
    return s.on("error", function(e) {
      return cb(e);
    });
  };

  skipUpToDate = function(localFolder, files, cb) {
    var i, next, results;
    if (localFolder.charAt(localFolder.length - 1) !== "/") {
      localFolder = localFolder + "/";
    }
    results = [];
    i = 0;
    return (next = function() {
      var file, lp;
      file = files[i++];
      if (!file) {
        return cb(false, results);
      }
      lp = localFolder + file.path;
      return fs.exists(lp, function(exists) {
        if (exists) {
          return getShaForFile(lp, function(err, hash) {
            if (err) {
              return cb(err);
            }
            if (hash !== file.sha) {
              results.push(file);
            }
            return next();
          });
        } else {
          results.push(file);
          return next();
        }
      });
    })();
  };

  downloadGithubFiles = function(path, files, cb) {
    var cycle;
    if (path.charAt(path.length - 1) !== "/") {
      path = path + "/";
    }
    return (cycle = function() {
      var file;
      if (files.length === 0) {
        return cb(false);
      } else {
        file = files.shift();
        return getJSON(file.url, function(err, json) {
          var contents;
          if (err) {
            cb(err);
          }
          if (json.content || json.size === 0) {
            contents = "";
            if (json.size !== 0) {
              contents = new Buffer(json.content, "base64");
            }
            return fs.writeFile(path + file.path, contents, function(err) {
              if (err) {
                return cb(err);
              }
              return cycle();
            });
          } else {
            return cb(true);
          }
        });
      }
    })();
  };

  exports.updateByRepo = function(username, reponame, path, cb) {
    var url;
    url = "https://api.github.com/repos/" + username + "/" + reponame + "/contents/";
    console.log("Checking for updates to Jeet");
    return getReposFileHashes(url, function(err, gfiles) {
      if (err) {
        return cb(err);
      }
      return skipUpToDate(path, gfiles, function(err, files) {
        if (err) {
          return cb(err);
        }
        if (files.length === 0) {
          console.log("No new updates");
          return cb(false);
        } else {
          return downloadGithubFiles(path, files, function(err) {
            if (err) {
              return cb(err);
            }
            console.log("Update Complete");
            return cb(false);
          });
        }
      });
    });
  };

}).call(this);
